<?php

// Check if exists an autoload generated by composer
if (file_exists(__DIR__.'/../vendor/.composer/autoload.php') == false) 
    die('You must setup the dependencies for the project using Composer.');

// Requires the composer's autoload
require_once __DIR__.'/../vendor/.composer/autoload.php';

// Load the configuration file
if (file_exists(__DIR__.'/../config.yml') == false) 
    die('You must configure your environment through the config.yml');

try {
    $yaml = new Symfony\Component\Yaml\Parser();
    $configurations = $yaml->parse(file_get_contents(__DIR__.'/../config.yml'));
    unset($yaml);

    if (isset($configurations['cache.dir']))
        $configurations['cache.dir'] = __DIR__.'/../'.$configurations['cache.dir'];
    
    if (!isset($configurations['database.dsn'])) 
        die('You must configure a database through the config.yml');       
    
} catch (Symfony\Component\Yaml\Exception\ParseException $e) {
    die('Unable to parse the configuration file: ' . $e->getMessage());
}


/**
 * Init
 ******************************************************************************/
$app = new Silex\Application();
$app->register(new Silex\Provider\SessionServiceProvider());
$app->register(new Silex\Provider\TwigServiceProvider(), array(
    'twig.path' => __DIR__ . '/../src/GitHubSummary/Resources/Views',
));

// Put the configurations on the app
foreach ($configurations as $configKey => $configValue) {
    $app[$configKey] = $configValue;
}

/**
 * Filters
 ******************************************************************************/
$app->before(function ($request) use($app) {
    // Starts the session
    $request->getSession()->start();

    // Declare the github's service
    $app['github'] = new GitHubSummary\Services\GitHub(
        new GitHubSummary\Helpers\Cache($app['cache.dir']),
        new Respect\Relational\Mapper(new PDO($app['database.dsn'])),
        $app['session']->get('access_token')
    );
});

/**
 * Middlewares
 ******************************************************************************/
$mustBeLogged = function ($request) use ($app) {
    if (!$app['session']->has('access_token'))
        return $app->redirect('/login');
};

/**
 * Routes
 ******************************************************************************/
$app->get('/login', function() use($app)
{
    return $app['twig']->render('login.twig', array(
        'url_login' => $app['github']->getAuthorizeUrl($app['github.client_id'])
    ));
})
->bind('login');


$app->get('/login/callback', function() use($app)
{
    $token = $app['github']->getAccessToken(
        $app['github.client_id'],
        $app['github.client_secret'],
        $app['request']->get('code')
    );
    if($token) {
        $app['session']->set('access_token', $token);
        $app['session']->set('user', $app['github']->getUser());
        return $app->redirect('/');
    }

    return $app->redirect('/error');
})
->bind('login_calback');


$app->get('/logout', function() use($app)
{
    $app['session']->clear();
    return $app->redirect('/login');
})
->bind('logout');


$app->get('/', function() use($app)
{
    return $app['twig']->render('index.twig', array(
        'repositories' => $app['github']->getWatchedRepositories(),
        'followingUsers' => $app['github']->getFollowingUsers(),
    ));
})
->bind('home')
->middleware($mustBeLogged);


$app->get('/events/users/{interval}', function($interval) use($app)
{
    return $app['twig']->render('events.twig', array(
        'title' => 'Users Events',
        'interval' => $interval,
        'events' => $app['github']->getUsersEvents($interval)
    ));
})
->value('interval', '1d')
->bind('events_users')
->middleware($mustBeLogged);


$app->get('/events/repositories/{interval}', function($interval) use($app)
{
    return $app['twig']->render('events.twig', array(
        'title' => 'Repositories Events',
        'interval' => $interval,
        'events' => $app['github']->getRepositoriesEvents($interval)
    ));
})
->value('interval', '1d')
->bind('events_repositories')
->middleware($mustBeLogged);


$app->get('/cron', function() use($app)
{
    $user = $app['session']->get('user');
    $app['github']->update($user['login']);
    return $app->redirect(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '/');
})
->bind('cron')
->middleware($mustBeLogged);


$app->run();
